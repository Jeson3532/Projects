from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from src.bot.fsm.groups import MenuStates
from src.bot.other.funcs import parse_reg_info
from src.bot.keyboard.inline import get_confirm_reg_keyboard

import aiohttp as http

router = Router()
register_states = [
    MenuStates.CHOICE_REGISTRATION_OPTION_STATE,
    MenuStates.REGISTER_ONE_MESSAGE_STATE,
    MenuStates.CONFIRM_REGISTRATION_STATE
]
@router.message(MenuStates.REGISTER_ONE_MESSAGE_STATE)
async def register(msg: Message, state: FSMContext):
    reg_info = msg.text
    result = parse_reg_info(reg_info)
    status = result.get("status")
    if status:
        data = result.get("data")
        await msg.answer("üìÉ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                         f"- –ò–º—è: {data.name}\n"
                         f"- Email: {data.email}\n"
                         f"- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.phone.split(":")[1]}\n"
                         f"- –í–æ–∑—Ä–∞—Å—Ç: {data.age}", reply_markup=await get_confirm_reg_keyboard())
        await state.set_data(data.model_dump())
        await state.set_state(MenuStates.CONFIRM_REGISTRATION_STATE)

    else:
        detail = result.get("detail")
        await msg.answer("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                         f"üìÉ–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {detail}")

@router.message(MenuStates.CONFIRM_REGISTRATION_STATE)
async def echo_confirm_reg(msg: Message):
    await msg.answer(text="ü§ñ –°–µ–π—á–∞—Å –æ—Ç —Ç–µ–±—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏ —Å–æ–æ–±—â–∏—Ç—å –µ–≥–æ –º–Ω–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª.")

@router.callback_query(F.data == "confirm_reg", MenuStates.CONFIRM_REGISTRATION_STATE)
async def confirm_registration(cb: CallbackQuery, state: FSMContext):
    async with http.ClientSession() as session:
        await state.update_data(id=cb.from_user.id)
        async with session.post("http://127.0.0.1:8000/v1/user/addUser", json=await state.get_data()) as response:
            if response.status == 200:
                await cb.message.answer(text=f"üåü –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ")
            else:
                await cb.message.answer(text=f"ü§¨ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.")
            await state.clear()



@router.callback_query(F.data == "cancel_reg", MenuStates.CONFIRM_REGISTRATION_STATE)
async def cancel_registration(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await cb.message.answer(text='‚õî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ.')
    await state.clear()
